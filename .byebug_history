c
s3_connection.directories.get(s3_bucket)
exit
EXIT
s3_connection
s3_connection.directories
s3_connection.directories.get(s3_bucket)
s3_bucket
c
s3_connection
c
::Uploads::FogService.create
s3_connection
c
n
s
n
image
c
n
c
n
graffito
n
c
File.open("#{ Rails.root }/tmp/uploaded_image.gif", "wb") do |f|c
current_user.graffiti_through_uploads.new(graffiti_params)
current_user.graffiti.new(graffiti_params)
graffiti_params[:images].first.encoding
graffiti_params[:images].read.first.encoding
graffiti_params[:images].first.read.encode('utf-8')
graffiti_params[:images].read.first.encode('utf-8')
graffiti_params[:images].read.encode('utf-8')
graffifi_params[:images].read.encode('utf-8')
c
n
c
n
params
c
s
n
c
graffito.user
graffito
c
current_user.graffiti_through_uploads.build(graffiti_params)
c
Graffiti.first.user
current_user.graffiti_through_uploads.new(graffiti_params)
c
current_user.graffiti_through_uploads.new(graffiti_params)
current_user.graffiti_through_uploads.new
current_user.graffiti_through_uploads
current_user.graffiti
current_user
Graffiti.new(graffiti_params)
Graffito
c
current_user
current_user.graffiti_through_uploads.new(graffiti_params)
c
current_user.graffiti_through_uploads.new(graffiti_params)
c
graffiti_params
current_user.graffiti_through_uploads.new(graffiti_params)
current_user.graffiti_through_upload.new(graffiti_params)
current_user.graffiti_from_upload.new(graffiti_params)
current_user.graffiti.new(graffiti_params)
current_user
params
c
n
c
n
params
c
n
current_user
Graffiti.new(graffiti_params)
n
request.parameters
request.paramaters
s
c
current_user.graffiti.new(graffiti_params)
c
current_user.graffiti.new(graffiti_params)
c
current_user.graffiti.new(graffiti_params)
c
graffiti_params
graffiti_params.each
param
current_user.graffiti.new(graffiti_params)
c
c\
request.headers
request
c
current_user.graffiti.new(graffiti_params)
c
Graffiti.new
current_user.graffiti.new(graffiti_params)
c
n
@graffito
c
params
param
c
graffiti_params['images']
graffiti_params['images'].first.methods
c
n
c
s
n
s
n
s
current_user.graffiti.new(graffiti_params)
c
n
current_user.graffiti.new(graffiti_params)
c
@graffito
c
request
graffiti_params['images'].first.as_json
graffiti_params['images'].first
graffiti_params['images']
graffiti_params
c
n
s
c
n
graffito
n
s
current_user.graffiti.new(graffiti_params)
c
current_user.graffiti.new(graffiti_params)
graffiti_params
c
graffiti_params
current_user.graffiti.new(graffiti_params)
c
current_user.graffiti.new(graffiti_params)
current_user.graffiti.new
current_user.graffiti
graffiti_params
params
c
ap params
current_user.graffiti.new(graffiti_params)
c
n
c
x
d
graffiti_params['images']
graffiti_params
params
c
q
graffito_params
graffiti_params
current_user.graffiti.new(params)
params
c
params
c
n
session[:user_id]
params
super
c
n
self.class.get('/me', options)
n
c
n
c
n
user
n
self.class.get('/debug_token', verify_query(code, access_token))
c
n
self.class.get('/oauth/access_token', query(code))
c
user.errors.messages
user.errors.message
user.errors.messag
user.errors
c
respond_with errors: "Token is expired", status: 401
c
DateTime.now > user.oauth_expires_at
c
DateTime.now > user.oauth_expires_at
DateTime.now < user.oauth_expires_at
c
DateTime.now > user.oauth_expires_at
c
params
c
expires_at
c
params
c
user
n
c
n
c
params[:token]
user
n
c
expires_at
c
a
DateTime.now > user.oauth_expires_at
DateTime.now
Date.today
DateTime.today > user.oauth_expires_at
c
response
c
response
c
response
c
response
code
params
c
response
c
response
c
response
c
params
c
params
c
response
resposne
c
response = self.class.get('/10209142760179062', options)
response
c
